//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\IMP.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IMP {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class IMPParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, INT=19, BOOL=20, VAR=21, WS=22;
	public const int
		RULE_prog = 0, RULE_block = 1, RULE_statement = 2, RULE_statementSemicolonRequired = 3, 
		RULE_exp = 4;
	public static readonly string[] ruleNames = {
		"prog", "block", "statement", "statementSemicolonRequired", "exp"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'while'", "'if'", "'else'", "':='", "'='", 
		"'print'", "'+'", "'*'", "'||'", "'&&'", "'!'", "'=='", "'<'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "INT", "BOOL", "VAR", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IMP.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static IMPParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public IMPParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public IMPParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			int _alt;
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 12;
				Match(T__0);
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 19;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__0:
						{
						State = 14;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 13;
								block();
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 16;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					case T__2:
					case T__3:
					case T__4:
					case T__8:
					case VAR:
						{
						State = 18;
						statement();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 21;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__8) | (1L << VAR))) != 0) );
				State = 23;
				Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25;
				Match(T__0);
				State = 26;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StatmentContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementSemicolonRequiredContext statementSemicolonRequired() {
			return GetRuleContext<StatementSemicolonRequiredContext>(0);
		}
		public StatmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfThenElseContext : StatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public IfThenElseContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterIfThenElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitIfThenElse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatmentContext : StatementContext {
		public EmptyStatmentContext(StatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterEmptyStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitEmptyStatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
			case VAR:
				_localctx = new StatmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				statementSemicolonRequired();
				State = 30;
				Match(T__2);
				}
				break;
			case T__3:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 32;
				Match(T__3);
				State = 33;
				exp(0);
				State = 34;
				block();
				}
				break;
			case T__4:
				_localctx = new IfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 36;
				Match(T__4);
				State = 37;
				exp(0);
				State = 38;
				block();
				State = 39;
				Match(T__5);
				State = 40;
				block();
				}
				break;
			case T__2:
				_localctx = new EmptyStatmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 42;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSemicolonRequiredContext : ParserRuleContext {
		public StatementSemicolonRequiredContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSemicolonRequired; } }
	 
		public StatementSemicolonRequiredContext() { }
		public virtual void CopyFrom(StatementSemicolonRequiredContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrintContext : StatementSemicolonRequiredContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public PrintContext(StatementSemicolonRequiredContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrint(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignmentContext : StatementSemicolonRequiredContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(IMPParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VariableAssignmentContext(StatementSemicolonRequiredContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableDeclarationContext : StatementSemicolonRequiredContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(IMPParser.VAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public VariableDeclarationContext(StatementSemicolonRequiredContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementSemicolonRequiredContext statementSemicolonRequired() {
		StatementSemicolonRequiredContext _localctx = new StatementSemicolonRequiredContext(Context, State);
		EnterRule(_localctx, 6, RULE_statementSemicolonRequired);
		try {
			State = 53;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				_localctx = new VariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 45;
				Match(VAR);
				State = 46;
				Match(T__6);
				State = 47;
				exp(0);
				}
				break;
			case 2:
				_localctx = new VariableAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(VAR);
				State = 49;
				Match(T__7);
				State = 50;
				exp(0);
				}
				break;
			case 3:
				_localctx = new PrintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				Match(T__8);
				State = 52;
				exp(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
	 
		public ExpContext() { }
		public virtual void CopyFrom(ExpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VariablesContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR() { return GetToken(IMPParser.VAR, 0); }
		public VariablesContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariables(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public AdditionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public MultiplicationContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DisjunctionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public DisjunctionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitDisjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LesserContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public LesserContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterLesser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitLesser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLesser(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegationContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public NegationContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketsContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BracketsContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterBrackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitBrackets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBrackets(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(IMPParser.BOOL, 0); }
		public BoolContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConjunctionContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public ConjunctionContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitConjunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public EqualityContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(IMPParser.INT, 0); }
		public IntContext(ExpContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IIMPListener typedListener = listener as IIMPListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIMPVisitor<TResult> typedVisitor = visitor as IIMPVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		return exp(0);
	}

	private ExpContext exp(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpContext _localctx = new ExpContext(Context, _parentState);
		ExpContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_exp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				{
				_localctx = new IntContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 56;
				Match(INT);
				}
				break;
			case BOOL:
				{
				_localctx = new BoolContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 57;
				Match(BOOL);
				}
				break;
			case VAR:
				{
				_localctx = new VariablesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 58;
				Match(VAR);
				}
				break;
			case T__13:
				{
				_localctx = new NegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 59;
				Match(T__13);
				State = 60;
				exp(4);
				}
				break;
			case T__16:
				{
				_localctx = new BracketsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 61;
				Match(T__16);
				State = 62;
				exp(0);
				State = 63;
				Match(T__17);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 87;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 85;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new AdditionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 67;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 68;
						Match(T__9);
						State = 69;
						exp(9);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicationContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 70;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 71;
						Match(T__10);
						State = 72;
						exp(8);
						}
						break;
					case 3:
						{
						_localctx = new DisjunctionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 73;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 74;
						Match(T__11);
						State = 75;
						exp(7);
						}
						break;
					case 4:
						{
						_localctx = new ConjunctionContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 76;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 77;
						Match(T__12);
						State = 78;
						exp(6);
						}
						break;
					case 5:
						{
						_localctx = new EqualityContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 79;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 80;
						Match(T__14);
						State = 81;
						exp(4);
						}
						break;
					case 6:
						{
						_localctx = new LesserContext(new ExpContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_exp);
						State = 82;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 83;
						Match(T__15);
						State = 84;
						exp(3);
						}
						break;
					}
					} 
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return exp_sempred((ExpContext)_localctx, predIndex);
		}
		return true;
	}
	private bool exp_sempred(ExpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x18', ']', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x6', '\x3', '\x11', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '\x12', 
		'\x3', '\x3', '\x6', '\x3', '\x16', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\x17', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x1E', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '.', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x5', '\x5', '\x38', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x44', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'X', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '[', '\v', '\x6', '\x3', '\x6', '\x2', 
		'\x3', '\n', '\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\x2', '\x2', 
		'j', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '-', '\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\x43', '\x3', '\x2', '\x2', '\x2', '\f', '\r', 
		'\x5', '\x4', '\x3', '\x2', '\r', '\x3', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x15', '\a', '\x3', '\x2', '\x2', '\xF', '\x11', '\x5', '\x4', '\x3', 
		'\x2', '\x10', '\xF', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x13', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x16', '\x5', '\x6', '\x4', '\x2', '\x15', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1A', '\a', '\x4', '\x2', '\x2', '\x1A', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x3', '\x2', 
		'\x2', '\x1C', '\x1E', '\a', '\x4', '\x2', '\x2', '\x1D', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x5', '\b', '\x5', '\x2', 
		' ', '!', '\a', '\x5', '\x2', '\x2', '!', '.', '\x3', '\x2', '\x2', '\x2', 
		'\"', '#', '\a', '\x6', '\x2', '\x2', '#', '$', '\x5', '\n', '\x6', '\x2', 
		'$', '%', '\x5', '\x4', '\x3', '\x2', '%', '.', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\a', '\a', '\x2', '\x2', '\'', '(', '\x5', '\n', '\x6', '\x2', 
		'(', ')', '\x5', '\x4', '\x3', '\x2', ')', '*', '\a', '\b', '\x2', '\x2', 
		'*', '+', '\x5', '\x4', '\x3', '\x2', '+', '.', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\a', '\x5', '\x2', '\x2', '-', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '-', '\"', '\x3', '\x2', '\x2', '\x2', '-', '&', '\x3', '\x2', 
		'\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '.', '\a', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\a', '\x17', '\x2', '\x2', '\x30', 
		'\x31', '\a', '\t', '\x2', '\x2', '\x31', '\x38', '\x5', '\n', '\x6', 
		'\x2', '\x32', '\x33', '\a', '\x17', '\x2', '\x2', '\x33', '\x34', '\a', 
		'\n', '\x2', '\x2', '\x34', '\x38', '\x5', '\n', '\x6', '\x2', '\x35', 
		'\x36', '\a', '\v', '\x2', '\x2', '\x36', '\x38', '\x5', '\n', '\x6', 
		'\x2', '\x37', '/', '\x3', '\x2', '\x2', '\x2', '\x37', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\b', '\x6', '\x1', '\x2', 
		':', '\x44', '\a', '\x15', '\x2', '\x2', ';', '\x44', '\a', '\x16', '\x2', 
		'\x2', '<', '\x44', '\a', '\x17', '\x2', '\x2', '=', '>', '\a', '\x10', 
		'\x2', '\x2', '>', '\x44', '\x5', '\n', '\x6', '\x6', '?', '@', '\a', 
		'\x13', '\x2', '\x2', '@', '\x41', '\x5', '\n', '\x6', '\x2', '\x41', 
		'\x42', '\a', '\x14', '\x2', '\x2', '\x42', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x39', '\x3', '\x2', '\x2', '\x2', '\x43', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '<', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'Y', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\f', '\n', '\x2', 
		'\x2', '\x46', 'G', '\a', '\f', '\x2', '\x2', 'G', 'X', '\x5', '\n', '\x6', 
		'\v', 'H', 'I', '\f', '\t', '\x2', '\x2', 'I', 'J', '\a', '\r', '\x2', 
		'\x2', 'J', 'X', '\x5', '\n', '\x6', '\n', 'K', 'L', '\f', '\b', '\x2', 
		'\x2', 'L', 'M', '\a', '\xE', '\x2', '\x2', 'M', 'X', '\x5', '\n', '\x6', 
		'\t', 'N', 'O', '\f', '\a', '\x2', '\x2', 'O', 'P', '\a', '\xF', '\x2', 
		'\x2', 'P', 'X', '\x5', '\n', '\x6', '\b', 'Q', 'R', '\f', '\x5', '\x2', 
		'\x2', 'R', 'S', '\a', '\x11', '\x2', '\x2', 'S', 'X', '\x5', '\n', '\x6', 
		'\x6', 'T', 'U', '\f', '\x4', '\x2', '\x2', 'U', 'V', '\a', '\x12', '\x2', 
		'\x2', 'V', 'X', '\x5', '\n', '\x6', '\x5', 'W', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'H', '\x3', '\x2', '\x2', '\x2', 'W', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'N', '\x3', '\x2', '\x2', '\x2', 'W', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'T', '\x3', '\x2', '\x2', '\x2', 'X', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\v', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\v', '\x12', '\x15', '\x17', '\x1D', '-', '\x37', 
		'\x43', 'W', 'Y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace IMP
