//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\IMP.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace IMP {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IIMPListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class IMPBaseListener : IIMPListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="IMPParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProg([NotNull] IMPParser.ProgContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="IMPParser.prog"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProg([NotNull] IMPParser.ProgContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="IMPParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] IMPParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="IMPParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] IMPParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Statment</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatment([NotNull] IMPParser.StatmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Statment</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatment([NotNull] IMPParser.StatmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>While</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhile([NotNull] IMPParser.WhileContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>While</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhile([NotNull] IMPParser.WhileContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IfThenElse</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfThenElse([NotNull] IMPParser.IfThenElseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IfThenElse</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfThenElse([NotNull] IMPParser.IfThenElseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatment</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEmptyStatment([NotNull] IMPParser.EmptyStatmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatment</c>
	/// labeled alternative in <see cref="IMPParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEmptyStatment([NotNull] IMPParser.EmptyStatmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableDeclaration</c>
	/// labeled alternative in <see cref="IMPParser.statementSemicolonRequired"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableDeclaration([NotNull] IMPParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableDeclaration</c>
	/// labeled alternative in <see cref="IMPParser.statementSemicolonRequired"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableDeclaration([NotNull] IMPParser.VariableDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>VariableAssignment</c>
	/// labeled alternative in <see cref="IMPParser.statementSemicolonRequired"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableAssignment([NotNull] IMPParser.VariableAssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>VariableAssignment</c>
	/// labeled alternative in <see cref="IMPParser.statementSemicolonRequired"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableAssignment([NotNull] IMPParser.VariableAssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Print</c>
	/// labeled alternative in <see cref="IMPParser.statementSemicolonRequired"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPrint([NotNull] IMPParser.PrintContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Print</c>
	/// labeled alternative in <see cref="IMPParser.statementSemicolonRequired"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPrint([NotNull] IMPParser.PrintContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Variables</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariables([NotNull] IMPParser.VariablesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Variables</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariables([NotNull] IMPParser.VariablesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Addition</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddition([NotNull] IMPParser.AdditionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Addition</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddition([NotNull] IMPParser.AdditionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Multiplication</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiplication([NotNull] IMPParser.MultiplicationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Multiplication</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiplication([NotNull] IMPParser.MultiplicationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Disjunction</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDisjunction([NotNull] IMPParser.DisjunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Disjunction</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDisjunction([NotNull] IMPParser.DisjunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Lesser</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLesser([NotNull] IMPParser.LesserContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Lesser</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLesser([NotNull] IMPParser.LesserContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Negation</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegation([NotNull] IMPParser.NegationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Negation</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegation([NotNull] IMPParser.NegationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Brackets</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBrackets([NotNull] IMPParser.BracketsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Brackets</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBrackets([NotNull] IMPParser.BracketsContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Bool</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBool([NotNull] IMPParser.BoolContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Bool</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBool([NotNull] IMPParser.BoolContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Conjunction</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterConjunction([NotNull] IMPParser.ConjunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Conjunction</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitConjunction([NotNull] IMPParser.ConjunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEquality([NotNull] IMPParser.EqualityContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Equality</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEquality([NotNull] IMPParser.EqualityContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterInt([NotNull] IMPParser.IntContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Int</c>
	/// labeled alternative in <see cref="IMPParser.exp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitInt([NotNull] IMPParser.IntContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace IMP
