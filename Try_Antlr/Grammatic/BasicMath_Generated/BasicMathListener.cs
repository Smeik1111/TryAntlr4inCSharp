//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\BasicMath.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BasicMath {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="BasicMathParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public interface IBasicMathListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>BRACKETS</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBRACKETS([NotNull] BasicMathParser.BRACKETSContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>BRACKETS</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBRACKETS([NotNull] BasicMathParser.BRACKETSContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MULTIPLY</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMULTIPLY([NotNull] BasicMathParser.MULTIPLYContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MULTIPLY</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMULTIPLY([NotNull] BasicMathParser.MULTIPLYContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>UNARY</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUNARY([NotNull] BasicMathParser.UNARYContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>UNARY</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUNARY([NotNull] BasicMathParser.UNARYContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ATOM</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterATOM([NotNull] BasicMathParser.ATOMContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ATOM</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitATOM([NotNull] BasicMathParser.ATOMContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PLUS</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPLUS([NotNull] BasicMathParser.PLUSContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PLUS</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPLUS([NotNull] BasicMathParser.PLUSContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>MINUS</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMINUS([NotNull] BasicMathParser.MINUSContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>MINUS</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMINUS([NotNull] BasicMathParser.MINUSContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>DIVIDE</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDIVIDE([NotNull] BasicMathParser.DIVIDEContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>DIVIDE</c>
	/// labeled alternative in <see cref="BasicMathParser.equation"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDIVIDE([NotNull] BasicMathParser.DIVIDEContext context);
}
} // namespace BasicMath
