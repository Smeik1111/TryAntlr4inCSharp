//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\BasicMath.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace BasicMath {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class BasicMathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, INT=7, FLOAT=8, WS=9;
	public const int
		RULE_equation = 0;
	public static readonly string[] ruleNames = {
		"equation"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'+'", "'-'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "INT", "FLOAT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BasicMath.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BasicMathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BasicMathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BasicMathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class EquationContext : ParserRuleContext {
		public EquationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equation; } }
	 
		public EquationContext() { }
		public virtual void CopyFrom(EquationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BRACKETSContext : EquationContext {
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		public BRACKETSContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.EnterBRACKETS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.ExitBRACKETS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicMathVisitor<TResult> typedVisitor = visitor as IBasicMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBRACKETS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MULTIPLYContext : EquationContext {
		public EquationContext left;
		public EquationContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext[] equation() {
			return GetRuleContexts<EquationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation(int i) {
			return GetRuleContext<EquationContext>(i);
		}
		public MULTIPLYContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.EnterMULTIPLY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.ExitMULTIPLY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicMathVisitor<TResult> typedVisitor = visitor as IBasicMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMULTIPLY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UNARYContext : EquationContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation() {
			return GetRuleContext<EquationContext>(0);
		}
		public UNARYContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.EnterUNARY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.ExitUNARY(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicMathVisitor<TResult> typedVisitor = visitor as IBasicMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUNARY(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ATOMContext : EquationContext {
		public IToken atom;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(BasicMathParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(BasicMathParser.FLOAT, 0); }
		public ATOMContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.EnterATOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.ExitATOM(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicMathVisitor<TResult> typedVisitor = visitor as IBasicMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitATOM(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PLUSContext : EquationContext {
		public EquationContext left;
		public EquationContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext[] equation() {
			return GetRuleContexts<EquationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation(int i) {
			return GetRuleContext<EquationContext>(i);
		}
		public PLUSContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.EnterPLUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.ExitPLUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicMathVisitor<TResult> typedVisitor = visitor as IBasicMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPLUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MINUSContext : EquationContext {
		public EquationContext left;
		public EquationContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext[] equation() {
			return GetRuleContexts<EquationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation(int i) {
			return GetRuleContext<EquationContext>(i);
		}
		public MINUSContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.EnterMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.ExitMINUS(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicMathVisitor<TResult> typedVisitor = visitor as IBasicMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMINUS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DIVIDEContext : EquationContext {
		public EquationContext left;
		public EquationContext right;
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext[] equation() {
			return GetRuleContexts<EquationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EquationContext equation(int i) {
			return GetRuleContext<EquationContext>(i);
		}
		public DIVIDEContext(EquationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.EnterDIVIDE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBasicMathListener typedListener = listener as IBasicMathListener;
			if (typedListener != null) typedListener.ExitDIVIDE(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBasicMathVisitor<TResult> typedVisitor = visitor as IBasicMathVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDIVIDE(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquationContext equation() {
		return equation(0);
	}

	private EquationContext equation(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EquationContext _localctx = new EquationContext(Context, _parentState);
		EquationContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_equation, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				{
				_localctx = new BRACKETSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 3;
				Match(T__0);
				State = 4;
				equation(0);
				State = 5;
				Match(T__1);
				}
				break;
			case T__2:
			case T__3:
				{
				_localctx = new UNARYContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 7;
				((UNARYContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__2 || _la==T__3) ) {
					((UNARYContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8;
				equation(6);
				}
				break;
			case INT:
			case FLOAT:
				{
				_localctx = new ATOMContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 9;
				((ATOMContext)_localctx).atom = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INT || _la==FLOAT) ) {
					((ATOMContext)_localctx).atom = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 26;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 24;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MULTIPLYContext(new EquationContext(_parentctx, _parentState));
						((MULTIPLYContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equation);
						State = 12;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 13;
						Match(T__4);
						State = 14;
						((MULTIPLYContext)_localctx).right = equation(6);
						}
						break;
					case 2:
						{
						_localctx = new PLUSContext(new EquationContext(_parentctx, _parentState));
						((PLUSContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equation);
						State = 15;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 16;
						Match(T__2);
						State = 17;
						((PLUSContext)_localctx).right = equation(5);
						}
						break;
					case 3:
						{
						_localctx = new MINUSContext(new EquationContext(_parentctx, _parentState));
						((MINUSContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equation);
						State = 18;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 19;
						Match(T__3);
						State = 20;
						((MINUSContext)_localctx).right = equation(4);
						}
						break;
					case 4:
						{
						_localctx = new DIVIDEContext(new EquationContext(_parentctx, _parentState));
						((DIVIDEContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_equation);
						State = 21;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 22;
						Match(T__5);
						State = 23;
						((DIVIDEContext)_localctx).right = equation(3);
						}
						break;
					}
					} 
				}
				State = 28;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return equation_sempred((EquationContext)_localctx, predIndex);
		}
		return true;
	}
	private bool equation_sempred(EquationContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\v', ' ', '\x4', '\x2', '\t', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\r', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x1B', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1E', 
		'\v', '\x2', '\x3', '\x2', '\x2', '\x3', '\x2', '\x3', '\x2', '\x2', '\x4', 
		'\x3', '\x2', '\x5', '\x6', '\x3', '\x2', '\t', '\n', '\x2', '$', '\x2', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\x5', '\b', '\x2', '\x1', '\x2', 
		'\x5', '\x6', '\a', '\x3', '\x2', '\x2', '\x6', '\a', '\x5', '\x2', '\x2', 
		'\x2', '\a', '\b', '\a', '\x4', '\x2', '\x2', '\b', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\n', '\t', '\x2', '\x2', '\x2', '\n', '\r', '\x5', 
		'\x2', '\x2', '\b', '\v', '\r', '\t', '\x3', '\x2', '\x2', '\f', '\x4', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\t', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\r', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\xF', '\f', '\a', '\x2', '\x2', '\xF', '\x10', '\a', '\a', '\x2', 
		'\x2', '\x10', '\x1B', '\x5', '\x2', '\x2', '\b', '\x11', '\x12', '\f', 
		'\x6', '\x2', '\x2', '\x12', '\x13', '\a', '\x5', '\x2', '\x2', '\x13', 
		'\x1B', '\x5', '\x2', '\x2', '\a', '\x14', '\x15', '\f', '\x5', '\x2', 
		'\x2', '\x15', '\x16', '\a', '\x6', '\x2', '\x2', '\x16', '\x1B', '\x5', 
		'\x2', '\x2', '\x6', '\x17', '\x18', '\f', '\x4', '\x2', '\x2', '\x18', 
		'\x19', '\a', '\b', '\x2', '\x2', '\x19', '\x1B', '\x5', '\x2', '\x2', 
		'\x5', '\x1A', '\xE', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x14', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x5', '\f', '\x1A', '\x1C',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace BasicMath
